#!/usr/bin/with-contenv sh

# create directory for LetsEncrypt acme-challenge
echo "Creating /www directory"
mkdir /www
chown -R abc:abc /www

# create Nginx config files from templates
echo "Creating Nginx config files"
rm -f /etc/nginx/conf.d/*
/fill-template.sh "/defaults/nginx.conf.template" "/etc/nginx/nginx.conf"

WS_PORT=${WS_PORT:-${HTTPS_PORT}}
if [ "${WS_PORT}" = "${HTTPS_PORT}" ]; then
  /fill-template.sh "/defaults/combined.conf.template" "/etc/nginx/conf.d/combined.conf"
else
  /fill-template.sh "/defaults/https.conf.template" "/etc/nginx/conf.d/https.conf"
  /fill-template.sh "/defaults/wss.conf.template" "/etc/nginx/conf.d/wss.conf"
fi

# delete the Let's Encrypt accounts directory if this is the first time that we run UNMS with integrated nginx
# this is necessary because the 'accounts/.../regr.json' file previously generated by the npm library
# is incompatible with the certbot tool in unms-nginx
if [ -z "${SSL_CERT}" ] && [ ! -f "/config/unms/cert/live.crt" ] && [ -d "/config/unms/cert/accounts" ]; then
  echo "Deleting old LetsEncrypt 'accounts' directory"
  rm -rf /config/unms/cert/accounts
fi

# generate self-signed SSL certificate if none is provided or existing
if [ -z "${SSL_CERT}" ]; then
  if [ -f /config/unms/cert/live.crt ] && [ -f /config/unms/cert/live.key ]; then
    echo "Will use existing SSL certificate"
  else
    echo "Generating self-signed certificate without domain names"
    SAN="DNS:localhost" openssl req -nodes -x509 -newkey "rsa:2048" -subj "/CN=localhost" -keyout "/config/unms/cert/live.key" -out "/config/unms/cert/live.crt" -days "36500" -batch -config "/defaults/openssl.cnf"
    chown -R abc:abc /config/unms/cert/*
  fi
else
  echo "Will use custom SSL certificate"
fi
